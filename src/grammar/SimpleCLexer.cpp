
// Generated from src/grammar/SimpleC.g4 by ANTLR 4.7.1


#include "SimpleCLexer.h"


using namespace antlr4;


SimpleCLexer::SimpleCLexer(CharStream *input) : Lexer(input) {
  _interpreter = new atn::LexerATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

SimpleCLexer::~SimpleCLexer() {
  delete _interpreter;
}

std::string SimpleCLexer::getGrammarFileName() const {
  return "SimpleC.g4";
}

const std::vector<std::string>& SimpleCLexer::getRuleNames() const {
  return _ruleNames;
}

const std::vector<std::string>& SimpleCLexer::getChannelNames() const {
  return _channelNames;
}

const std::vector<std::string>& SimpleCLexer::getModeNames() const {
  return _modeNames;
}

const std::vector<std::string>& SimpleCLexer::getTokenNames() const {
  return _tokenNames;
}

dfa::Vocabulary& SimpleCLexer::getVocabulary() const {
  return _vocabulary;
}

const std::vector<uint16_t> SimpleCLexer::getSerializedATN() const {
  return _serializedATN;
}

const atn::ATN& SimpleCLexer::getATN() const {
  return _atn;
}




// Static vars and initialization.
std::vector<dfa::DFA> SimpleCLexer::_decisionToDFA;
atn::PredictionContextCache SimpleCLexer::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN SimpleCLexer::_atn;
std::vector<uint16_t> SimpleCLexer::_serializedATN;

std::vector<std::string> SimpleCLexer::_ruleNames = {
  u8"Print", u8"String", u8"Char", u8"Whitespace", u8"Newline"
};

std::vector<std::string> SimpleCLexer::_channelNames = {
  "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
};

std::vector<std::string> SimpleCLexer::_modeNames = {
  u8"DEFAULT_MODE"
};

std::vector<std::string> SimpleCLexer::_literalNames = {
};

std::vector<std::string> SimpleCLexer::_symbolicNames = {
  "", u8"Print", u8"String", u8"Char", u8"Whitespace", u8"Newline"
};

dfa::Vocabulary SimpleCLexer::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> SimpleCLexer::_tokenNames;

SimpleCLexer::Initializer::Initializer() {
  // This code could be in a static initializer lambda, but VS doesn't allow access to private class members from there.
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  _serializedATN = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
    0x2, 0x7, 0x32, 0x8, 0x1, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
    0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x3, 0x2, 0x3, 
    0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 
    0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x7, 0x3, 0x1c, 
    0xa, 0x3, 0xc, 0x3, 0xe, 0x3, 0x1f, 0xb, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 
    0x4, 0x3, 0x4, 0x3, 0x5, 0x6, 0x5, 0x26, 0xa, 0x5, 0xd, 0x5, 0xe, 0x5, 
    0x27, 0x3, 0x5, 0x3, 0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x5, 0x6, 0x2f, 
    0xa, 0x6, 0x3, 0x6, 0x3, 0x6, 0x2, 0x2, 0x7, 0x3, 0x3, 0x5, 0x4, 0x7, 
    0x5, 0x9, 0x6, 0xb, 0x7, 0x3, 0x2, 0x5, 0x6, 0x2, 0xc, 0xc, 0xf, 0xf, 
    0x24, 0x24, 0x5e, 0x5e, 0x4, 0x2, 0xb, 0xb, 0x22, 0x22, 0x4, 0x2, 0xc, 
    0xc, 0xf, 0xf, 0x2, 0x34, 0x2, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x5, 0x3, 
    0x2, 0x2, 0x2, 0x2, 0x7, 0x3, 0x2, 0x2, 0x2, 0x2, 0x9, 0x3, 0x2, 0x2, 
    0x2, 0x2, 0xb, 0x3, 0x2, 0x2, 0x2, 0x3, 0xd, 0x3, 0x2, 0x2, 0x2, 0x5, 
    0x19, 0x3, 0x2, 0x2, 0x2, 0x7, 0x22, 0x3, 0x2, 0x2, 0x2, 0x9, 0x25, 
    0x3, 0x2, 0x2, 0x2, 0xb, 0x2e, 0x3, 0x2, 0x2, 0x2, 0xd, 0xe, 0x7, 0x72, 
    0x2, 0x2, 0xe, 0xf, 0x7, 0x74, 0x2, 0x2, 0xf, 0x10, 0x7, 0x6b, 0x2, 
    0x2, 0x10, 0x11, 0x7, 0x70, 0x2, 0x2, 0x11, 0x12, 0x7, 0x76, 0x2, 0x2, 
    0x12, 0x13, 0x7, 0x68, 0x2, 0x2, 0x13, 0x14, 0x3, 0x2, 0x2, 0x2, 0x14, 
    0x15, 0x7, 0x2a, 0x2, 0x2, 0x15, 0x16, 0x5, 0x5, 0x3, 0x2, 0x16, 0x17, 
    0x7, 0x2b, 0x2, 0x2, 0x17, 0x18, 0x7, 0x3d, 0x2, 0x2, 0x18, 0x4, 0x3, 
    0x2, 0x2, 0x2, 0x19, 0x1d, 0x7, 0x24, 0x2, 0x2, 0x1a, 0x1c, 0x5, 0x7, 
    0x4, 0x2, 0x1b, 0x1a, 0x3, 0x2, 0x2, 0x2, 0x1c, 0x1f, 0x3, 0x2, 0x2, 
    0x2, 0x1d, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x1d, 0x1e, 0x3, 0x2, 0x2, 0x2, 
    0x1e, 0x20, 0x3, 0x2, 0x2, 0x2, 0x1f, 0x1d, 0x3, 0x2, 0x2, 0x2, 0x20, 
    0x21, 0x7, 0x24, 0x2, 0x2, 0x21, 0x6, 0x3, 0x2, 0x2, 0x2, 0x22, 0x23, 
    0xa, 0x2, 0x2, 0x2, 0x23, 0x8, 0x3, 0x2, 0x2, 0x2, 0x24, 0x26, 0x9, 
    0x3, 0x2, 0x2, 0x25, 0x24, 0x3, 0x2, 0x2, 0x2, 0x26, 0x27, 0x3, 0x2, 
    0x2, 0x2, 0x27, 0x25, 0x3, 0x2, 0x2, 0x2, 0x27, 0x28, 0x3, 0x2, 0x2, 
    0x2, 0x28, 0x29, 0x3, 0x2, 0x2, 0x2, 0x29, 0x2a, 0x8, 0x5, 0x2, 0x2, 
    0x2a, 0xa, 0x3, 0x2, 0x2, 0x2, 0x2b, 0x2f, 0x9, 0x4, 0x2, 0x2, 0x2c, 
    0x2d, 0x7, 0xf, 0x2, 0x2, 0x2d, 0x2f, 0x7, 0xc, 0x2, 0x2, 0x2e, 0x2b, 
    0x3, 0x2, 0x2, 0x2, 0x2e, 0x2c, 0x3, 0x2, 0x2, 0x2, 0x2f, 0x30, 0x3, 
    0x2, 0x2, 0x2, 0x30, 0x31, 0x8, 0x6, 0x2, 0x2, 0x31, 0xc, 0x3, 0x2, 
    0x2, 0x2, 0x6, 0x2, 0x1d, 0x27, 0x2e, 0x3, 0x8, 0x2, 0x2, 
  };

  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

SimpleCLexer::Initializer SimpleCLexer::_init;
